// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file sf/firehose/v2/firehose.proto (package sf.firehose.v2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Any, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file sf/firehose/v2/firehose.proto.
 */
export const file_sf_firehose_v2_firehose: GenFile = /*@__PURE__*/
  fileDesc("Ch1zZi9maXJlaG9zZS92Mi9maXJlaG9zZS5wcm90bxIOc2YuZmlyZWhvc2UudjIijwMKElNpbmdsZUJsb2NrUmVxdWVzdBJGCgxibG9ja19udW1iZXIYAyABKAsyLi5zZi5maXJlaG9zZS52Mi5TaW5nbGVCbG9ja1JlcXVlc3QuQmxvY2tOdW1iZXJIABJWChVibG9ja19oYXNoX2FuZF9udW1iZXIYBCABKAsyNS5zZi5maXJlaG9zZS52Mi5TaW5nbGVCbG9ja1JlcXVlc3QuQmxvY2tIYXNoQW5kTnVtYmVySAASOwoGY3Vyc29yGAUgASgLMikuc2YuZmlyZWhvc2UudjIuU2luZ2xlQmxvY2tSZXF1ZXN0LkN1cnNvckgAEigKCnRyYW5zZm9ybXMYBiADKAsyFC5nb29nbGUucHJvdG9idWYuQW55GhoKC0Jsb2NrTnVtYmVyEgsKA251bRgBIAEoBBovChJCbG9ja0hhc2hBbmROdW1iZXISCwoDbnVtGAEgASgEEgwKBGhhc2gYAiABKAkaGAoGQ3Vyc29yEg4KBmN1cnNvchgBIAEoCUILCglyZWZlcmVuY2UiawoTU2luZ2xlQmxvY2tSZXNwb25zZRIjCgVibG9jaxgBIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnkSLwoIbWV0YWRhdGEYAiABKAsyHS5zZi5maXJlaG9zZS52Mi5CbG9ja01ldGFkYXRhIo8BCgdSZXF1ZXN0EhcKD3N0YXJ0X2Jsb2NrX251bRgBIAEoAxIOCgZjdXJzb3IYAiABKAkSFgoOc3RvcF9ibG9ja19udW0YAyABKAQSGQoRZmluYWxfYmxvY2tzX29ubHkYBCABKAgSKAoKdHJhbnNmb3JtcxgKIAMoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnkimAEKCFJlc3BvbnNlEiMKBWJsb2NrGAEgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueRImCgRzdGVwGAYgASgOMhguc2YuZmlyZWhvc2UudjIuRm9ya1N0ZXASDgoGY3Vyc29yGAogASgJEi8KCG1ldGFkYXRhGAwgASgLMh0uc2YuZmlyZWhvc2UudjIuQmxvY2tNZXRhZGF0YSKKAQoNQmxvY2tNZXRhZGF0YRILCgNudW0YASABKAQSCgoCaWQYAiABKAkSEgoKcGFyZW50X251bRgDIAEoBBIRCglwYXJlbnRfaWQYBCABKAkSDwoHbGliX251bRgFIAEoBBIoCgR0aW1lGAYgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCINCgtJbmZvUmVxdWVzdCKtAwoMSW5mb1Jlc3BvbnNlEhIKCmNoYWluX25hbWUYASABKAkSGgoSY2hhaW5fbmFtZV9hbGlhc2VzGAIgAygJEiIKGmZpcnN0X3N0cmVhbWFibGVfYmxvY2tfbnVtGAMgASgEEiEKGWZpcnN0X3N0cmVhbWFibGVfYmxvY2tfaWQYBCABKAkSRwoRYmxvY2tfaWRfZW5jb2RpbmcYBSABKA4yLC5zZi5maXJlaG9zZS52Mi5JbmZvUmVzcG9uc2UuQmxvY2tJZEVuY29kaW5nEhYKDmJsb2NrX2ZlYXR1cmVzGAogAygJIsQBCg9CbG9ja0lkRW5jb2RpbmcSGwoXQkxPQ0tfSURfRU5DT0RJTkdfVU5TRVQQABIZChVCTE9DS19JRF9FTkNPRElOR19IRVgQARIcChhCTE9DS19JRF9FTkNPRElOR18wWF9IRVgQAhIcChhCTE9DS19JRF9FTkNPRElOR19CQVNFNTgQAxIcChhCTE9DS19JRF9FTkNPRElOR19CQVNFNjQQBBIfChtCTE9DS19JRF9FTkNPRElOR19CQVNFNjRVUkwQBSpHCghGb3JrU3RlcBIOCgpTVEVQX1VOU0VUEAASDAoIU1RFUF9ORVcQARINCglTVEVQX1VORE8QAhIOCgpTVEVQX0ZJTkFMEAMyRwoGU3RyZWFtEj0KBkJsb2NrcxIXLnNmLmZpcmVob3NlLnYyLlJlcXVlc3QaGC5zZi5maXJlaG9zZS52Mi5SZXNwb25zZTABMlkKBUZldGNoElAKBUJsb2NrEiIuc2YuZmlyZWhvc2UudjIuU2luZ2xlQmxvY2tSZXF1ZXN0GiMuc2YuZmlyZWhvc2UudjIuU2luZ2xlQmxvY2tSZXNwb25zZTJRCgxFbmRwb2ludEluZm8SQQoESW5mbxIbLnNmLmZpcmVob3NlLnYyLkluZm9SZXF1ZXN0Ghwuc2YuZmlyZWhvc2UudjIuSW5mb1Jlc3BvbnNlQjlaN2dpdGh1Yi5jb20vc3RyZWFtaW5nZmFzdC9wYmdvL3NmL2ZpcmVob3NlL3YyO3BiZmlyZWhvc2ViBnByb3RvMw", [file_google_protobuf_any, file_google_protobuf_timestamp]);

/**
 * @generated from message sf.firehose.v2.SingleBlockRequest
 */
export type SingleBlockRequest = Message<"sf.firehose.v2.SingleBlockRequest"> & {
  /**
   * @generated from oneof sf.firehose.v2.SingleBlockRequest.reference
   */
  reference: {
    /**
     * @generated from field: sf.firehose.v2.SingleBlockRequest.BlockNumber block_number = 3;
     */
    value: SingleBlockRequest_BlockNumber;
    case: "blockNumber";
  } | {
    /**
     * @generated from field: sf.firehose.v2.SingleBlockRequest.BlockHashAndNumber block_hash_and_number = 4;
     */
    value: SingleBlockRequest_BlockHashAndNumber;
    case: "blockHashAndNumber";
  } | {
    /**
     * @generated from field: sf.firehose.v2.SingleBlockRequest.Cursor cursor = 5;
     */
    value: SingleBlockRequest_Cursor;
    case: "cursor";
  } | { case: undefined; value?: undefined };

  /**
   * @generated from field: repeated google.protobuf.Any transforms = 6;
   */
  transforms: Any[];
};

/**
 * Describes the message sf.firehose.v2.SingleBlockRequest.
 * Use `create(SingleBlockRequestSchema)` to create a new message.
 */
export const SingleBlockRequestSchema: GenMessage<SingleBlockRequest> = /*@__PURE__*/
  messageDesc(file_sf_firehose_v2_firehose, 0);

/**
 * Get the current known canonical version of a block at with this number
 *
 * @generated from message sf.firehose.v2.SingleBlockRequest.BlockNumber
 */
export type SingleBlockRequest_BlockNumber = Message<"sf.firehose.v2.SingleBlockRequest.BlockNumber"> & {
  /**
   * @generated from field: uint64 num = 1;
   */
  num: bigint;
};

/**
 * Describes the message sf.firehose.v2.SingleBlockRequest.BlockNumber.
 * Use `create(SingleBlockRequest_BlockNumberSchema)` to create a new message.
 */
export const SingleBlockRequest_BlockNumberSchema: GenMessage<SingleBlockRequest_BlockNumber> = /*@__PURE__*/
  messageDesc(file_sf_firehose_v2_firehose, 0, 0);

/**
 * Get the current block with specific hash and number
 *
 * @generated from message sf.firehose.v2.SingleBlockRequest.BlockHashAndNumber
 */
export type SingleBlockRequest_BlockHashAndNumber = Message<"sf.firehose.v2.SingleBlockRequest.BlockHashAndNumber"> & {
  /**
   * @generated from field: uint64 num = 1;
   */
  num: bigint;

  /**
   * @generated from field: string hash = 2;
   */
  hash: string;
};

/**
 * Describes the message sf.firehose.v2.SingleBlockRequest.BlockHashAndNumber.
 * Use `create(SingleBlockRequest_BlockHashAndNumberSchema)` to create a new message.
 */
export const SingleBlockRequest_BlockHashAndNumberSchema: GenMessage<SingleBlockRequest_BlockHashAndNumber> = /*@__PURE__*/
  messageDesc(file_sf_firehose_v2_firehose, 0, 1);

/**
 * Get the block that generated a specific cursor
 *
 * @generated from message sf.firehose.v2.SingleBlockRequest.Cursor
 */
export type SingleBlockRequest_Cursor = Message<"sf.firehose.v2.SingleBlockRequest.Cursor"> & {
  /**
   * @generated from field: string cursor = 1;
   */
  cursor: string;
};

/**
 * Describes the message sf.firehose.v2.SingleBlockRequest.Cursor.
 * Use `create(SingleBlockRequest_CursorSchema)` to create a new message.
 */
export const SingleBlockRequest_CursorSchema: GenMessage<SingleBlockRequest_Cursor> = /*@__PURE__*/
  messageDesc(file_sf_firehose_v2_firehose, 0, 2);

/**
 * @generated from message sf.firehose.v2.SingleBlockResponse
 */
export type SingleBlockResponse = Message<"sf.firehose.v2.SingleBlockResponse"> & {
  /**
   * @generated from field: google.protobuf.Any block = 1;
   */
  block?: Any;

  /**
   * Metadata about the block, added in some Firehose version, so consumer
   * should be ready to handle the absence of this field.
   *
   * @generated from field: sf.firehose.v2.BlockMetadata metadata = 2;
   */
  metadata?: BlockMetadata;
};

/**
 * Describes the message sf.firehose.v2.SingleBlockResponse.
 * Use `create(SingleBlockResponseSchema)` to create a new message.
 */
export const SingleBlockResponseSchema: GenMessage<SingleBlockResponse> = /*@__PURE__*/
  messageDesc(file_sf_firehose_v2_firehose, 1);

/**
 * @generated from message sf.firehose.v2.Request
 */
export type Request = Message<"sf.firehose.v2.Request"> & {
  /**
   * Controls where the stream of blocks will start.
   *
   * The stream will start **inclusively** at the requested block num.
   *
   * When not provided, starts at first streamable block of the chain. Not all
   * chain starts at the same block number, so you might get an higher block than
   * requested when using default value of 0.
   *
   * Can be negative, will be resolved relative to the chain head block, assuming
   * a chain at head block #100, then using `-50` as the value will start at block
   * #50. If it resolves before first streamable block of chain, we assume start
   * of chain.
   *
   * If `start_cursor` is given, this value is ignored and the stream instead starts
   * immediately after the Block pointed by the opaque `start_cursor` value.
   *
   * @generated from field: int64 start_block_num = 1;
   */
  startBlockNum: bigint;

  /**
   * Controls where the stream of blocks will start which will be immediately after
   * the Block pointed by this opaque cursor.
   *
   * Obtain this value from a previously received `Response.cursor`.
   *
   * This value takes precedence over `start_block_num`.
   *
   * @generated from field: string cursor = 2;
   */
  cursor: string;

  /**
   * When non-zero, controls where the stream of blocks will stop.
   *
   * The stream will close **after** that block has passed so the boundary is
   * **inclusive**.
   *
   * @generated from field: uint64 stop_block_num = 3;
   */
  stopBlockNum: bigint;

  /**
   * With final_block_only, you only receive blocks with STEP_FINAL
   * Default behavior will send blocks as STEP_NEW, with occasional STEP_UNDO
   *
   * @generated from field: bool final_blocks_only = 4;
   */
  finalBlocksOnly: boolean;

  /**
   * @generated from field: repeated google.protobuf.Any transforms = 10;
   */
  transforms: Any[];
};

/**
 * Describes the message sf.firehose.v2.Request.
 * Use `create(RequestSchema)` to create a new message.
 */
export const RequestSchema: GenMessage<Request> = /*@__PURE__*/
  messageDesc(file_sf_firehose_v2_firehose, 2);

/**
 * @generated from message sf.firehose.v2.Response
 */
export type Response = Message<"sf.firehose.v2.Response"> & {
  /**
   * Chain specific block payload, ex:
   *   - sf.eosio.type.v1.Block
   *   - sf.ethereum.type.v1.Block
   *   - sf.near.type.v1.Block
   *
   * @generated from field: google.protobuf.Any block = 1;
   */
  block?: Any;

  /**
   * @generated from field: sf.firehose.v2.ForkStep step = 6;
   */
  step: ForkStep;

  /**
   * @generated from field: string cursor = 10;
   */
  cursor: string;

  /**
   * Metadata about the block, added in some Firehose version, so consumer
   * should be ready to handle the absence of this field.
   *
   * @generated from field: sf.firehose.v2.BlockMetadata metadata = 12;
   */
  metadata?: BlockMetadata;
};

/**
 * Describes the message sf.firehose.v2.Response.
 * Use `create(ResponseSchema)` to create a new message.
 */
export const ResponseSchema: GenMessage<Response> = /*@__PURE__*/
  messageDesc(file_sf_firehose_v2_firehose, 3);

/**
 * @generated from message sf.firehose.v2.BlockMetadata
 */
export type BlockMetadata = Message<"sf.firehose.v2.BlockMetadata"> & {
  /**
   * Num is the block number of this response's block.
   *
   * @generated from field: uint64 num = 1;
   */
  num: bigint;

  /**
   * ID is the block ID of this response's block. The ID actual representation is chain specific.
   * - Antelope & Ethereum uses hex.
   * - NEAR & Solana uses base58.
   *
   * Refer to the chain documentation for more details.
   *
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * ParentNum is the block number of the parent of this response's block
   *
   * @generated from field: uint64 parent_num = 3;
   */
  parentNum: bigint;

  /**
   * ParentID is the block ID of the parent of this response's block. If this response is the genesis block,
   * this field is empty.
   *
   * The ID actual representation is chain specific.
   * - Antelope & Ethereum uses hex.
   * - NEAR & Solana uses base58.
   *
   * Refer to the chain documentation for more details.
   *
   * @generated from field: string parent_id = 4;
   */
  parentId: string;

  /**
   * LibNum is the block number of the last irreversible block (a.k.a last finalized block) at the time of this
   * response' block. It determines the finality of the block.
   *
   * @generated from field: uint64 lib_num = 5;
   */
  libNum: bigint;

  /**
   * Time is the time at which the block was produced.
   *
   * @generated from field: google.protobuf.Timestamp time = 6;
   */
  time?: Timestamp;
};

/**
 * Describes the message sf.firehose.v2.BlockMetadata.
 * Use `create(BlockMetadataSchema)` to create a new message.
 */
export const BlockMetadataSchema: GenMessage<BlockMetadata> = /*@__PURE__*/
  messageDesc(file_sf_firehose_v2_firehose, 4);

/**
 * @generated from message sf.firehose.v2.InfoRequest
 */
export type InfoRequest = Message<"sf.firehose.v2.InfoRequest"> & {
};

/**
 * Describes the message sf.firehose.v2.InfoRequest.
 * Use `create(InfoRequestSchema)` to create a new message.
 */
export const InfoRequestSchema: GenMessage<InfoRequest> = /*@__PURE__*/
  messageDesc(file_sf_firehose_v2_firehose, 5);

/**
 * @generated from message sf.firehose.v2.InfoResponse
 */
export type InfoResponse = Message<"sf.firehose.v2.InfoResponse"> & {
  /**
   * Canonical chain name from https://thegraph.com/docs/en/developing/supported-networks/ (ex: matic, mainnet ...)
   *
   * @generated from field: string chain_name = 1;
   */
  chainName: string;

  /**
   * Alternate names for the chain.
   *
   * @generated from field: repeated string chain_name_aliases = 2;
   */
  chainNameAliases: string[];

  /**
   * First block that is served by this endpoint. This should usually be the genesis block, 
   * but some providers may have truncated history.
   *
   * @generated from field: uint64 first_streamable_block_num = 3;
   */
  firstStreamableBlockNum: bigint;

  /**
   * @generated from field: string first_streamable_block_id = 4;
   */
  firstStreamableBlockId: string;

  /**
   * This informs the client on how to decode the `block_id` field inside the "Clock" message
   * as well as the `first_streamable_block_id` above.
   *
   * @generated from field: sf.firehose.v2.InfoResponse.BlockIdEncoding block_id_encoding = 5;
   */
  blockIdEncoding: InfoResponse_BlockIdEncoding;

  /**
   * features describes the blocks. Popular values for EVM chains include `base`, `extended` or `hybrid`.
   *
   * @generated from field: repeated string block_features = 10;
   */
  blockFeatures: string[];
};

/**
 * Describes the message sf.firehose.v2.InfoResponse.
 * Use `create(InfoResponseSchema)` to create a new message.
 */
export const InfoResponseSchema: GenMessage<InfoResponse> = /*@__PURE__*/
  messageDesc(file_sf_firehose_v2_firehose, 6);

/**
 * @generated from enum sf.firehose.v2.InfoResponse.BlockIdEncoding
 */
export enum InfoResponse_BlockIdEncoding {
  /**
   * @generated from enum value: BLOCK_ID_ENCODING_UNSET = 0;
   */
  BLOCK_ID_ENCODING_UNSET = 0,

  /**
   * @generated from enum value: BLOCK_ID_ENCODING_HEX = 1;
   */
  BLOCK_ID_ENCODING_HEX = 1,

  /**
   * @generated from enum value: BLOCK_ID_ENCODING_0X_HEX = 2;
   */
  BLOCK_ID_ENCODING_0X_HEX = 2,

  /**
   * @generated from enum value: BLOCK_ID_ENCODING_BASE58 = 3;
   */
  BLOCK_ID_ENCODING_BASE58 = 3,

  /**
   * @generated from enum value: BLOCK_ID_ENCODING_BASE64 = 4;
   */
  BLOCK_ID_ENCODING_BASE64 = 4,

  /**
   * @generated from enum value: BLOCK_ID_ENCODING_BASE64URL = 5;
   */
  BLOCK_ID_ENCODING_BASE64URL = 5,
}

/**
 * Describes the enum sf.firehose.v2.InfoResponse.BlockIdEncoding.
 */
export const InfoResponse_BlockIdEncodingSchema: GenEnum<InfoResponse_BlockIdEncoding> = /*@__PURE__*/
  enumDesc(file_sf_firehose_v2_firehose, 6, 0);

/**
 * @generated from enum sf.firehose.v2.ForkStep
 */
export enum ForkStep {
  /**
   * @generated from enum value: STEP_UNSET = 0;
   */
  STEP_UNSET = 0,

  /**
   * Incoming block
   *
   * @generated from enum value: STEP_NEW = 1;
   */
  STEP_NEW = 1,

  /**
   * A reorg caused this specific block to be excluded from the chain
   *
   * @generated from enum value: STEP_UNDO = 2;
   */
  STEP_UNDO = 2,

  /**
   * Block is now final and can be committed (finality is chain specific,
   * see chain documentation for more details)
   *
   * @generated from enum value: STEP_FINAL = 3;
   */
  STEP_FINAL = 3,
}

/**
 * Describes the enum sf.firehose.v2.ForkStep.
 */
export const ForkStepSchema: GenEnum<ForkStep> = /*@__PURE__*/
  enumDesc(file_sf_firehose_v2_firehose, 0);

/**
 * @generated from service sf.firehose.v2.Stream
 */
export const Stream: GenService<{
  /**
   * @generated from rpc sf.firehose.v2.Stream.Blocks
   */
  blocks: {
    methodKind: "server_streaming";
    input: typeof RequestSchema;
    output: typeof ResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_sf_firehose_v2_firehose, 0);

/**
 * @generated from service sf.firehose.v2.Fetch
 */
export const Fetch: GenService<{
  /**
   * @generated from rpc sf.firehose.v2.Fetch.Block
   */
  block: {
    methodKind: "unary";
    input: typeof SingleBlockRequestSchema;
    output: typeof SingleBlockResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_sf_firehose_v2_firehose, 1);

/**
 * @generated from service sf.firehose.v2.EndpointInfo
 */
export const EndpointInfo: GenService<{
  /**
   * @generated from rpc sf.firehose.v2.EndpointInfo.Info
   */
  info: {
    methodKind: "unary";
    input: typeof InfoRequestSchema;
    output: typeof InfoResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_sf_firehose_v2_firehose, 2);

